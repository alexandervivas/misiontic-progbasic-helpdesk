/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.udea.mintic.progbasic.helpdesk.v1.ui;

import co.edu.udea.mintic.progbasic.helpdesk.v1.dominio.Solicitud;
import co.edu.udea.mintic.progbasic.helpdesk.v1.dominio.eventos.EventoSolicitud;
import co.edu.udea.mintic.progbasic.helpdesk.v1.excepciones.persistencia.EntidadNoEncontradaException;
import co.edu.udea.mintic.progbasic.helpdesk.v1.persistencia.Persistencia;
import co.edu.udea.mintic.progbasic.helpdesk.v1.ui.eventos.EventoSolicitudesForm;
import co.edu.udea.mintic.progbasic.helpdesk.v1.ui.eventos.TipoEventoSolicitudesForm;
import co.edu.udea.mintic.progbasic.helpdesk.v1.util.Publicador;
import co.edu.udea.mintic.progbasic.helpdesk.v1.util.Suscriptor;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alexandervivas
 */
public class SolicitudesForm extends javax.swing.JFrame implements Publicador<EventoSolicitudesForm>, Suscriptor<EventoSolicitud> {

    private List<Suscriptor<EventoSolicitudesForm>> suscriptores = new ArrayList<>();
    private Persistencia<Long, Solicitud> persistencia;
    
    /**
     * Creates new form SolicitudesForm
     */
    public SolicitudesForm(Persistencia<Long, Solicitud> persistencia) {
        initComponents();
        
        this.persistencia = persistencia;
        
        cargarModeloInicial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSolicitudes = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNuevaSolicitud = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tablaSolicitudes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Título", "Descripción", "Estado", "Asignado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaSolicitudes.getTableHeader().setReorderingAllowed(false);
        tablaSolicitudes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaSolicitudesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaSolicitudes);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mis Solicitudes");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Archivo");

        miNuevaSolicitud.setText("Nueva solicitud");
        miNuevaSolicitud.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNuevaSolicitudActionPerformed(evt);
            }
        });
        jMenu1.add(miNuevaSolicitud);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miNuevaSolicitudActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNuevaSolicitudActionPerformed
        suscriptores.forEach((suscriptor) -> suscriptor.recibirEvento(new EventoSolicitudesForm(TipoEventoSolicitudesForm.CREAR)));
    }//GEN-LAST:event_miNuevaSolicitudActionPerformed

    private void tablaSolicitudesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaSolicitudesMouseClicked
        // si se hace doble clic con el boton izquierdo del mouse
        if(SwingUtilities.isLeftMouseButton(evt) && evt.getClickCount() == 2) {
            
            long id = (long) tablaSolicitudes.getValueAt(tablaSolicitudes.getSelectedRow(), 0);
            
            try {
                
                Solicitud solicitud = persistencia.leer(id);
                suscriptores.forEach((suscriptor) -> suscriptor.recibirEvento(new EventoSolicitudesForm(TipoEventoSolicitudesForm.VER, solicitud)));
                
            } catch (EntidadNoEncontradaException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            
        }
    }//GEN-LAST:event_tablaSolicitudesMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem miNuevaSolicitud;
    private javax.swing.JTable tablaSolicitudes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void recibirEvento(EventoSolicitud evento) {
        actualizarModeloTabla(evento);
    }
    
    // para mayor informacion ver: https://stackoverflow.com/questions/3549206/how-to-add-row-in-jtable
    private void actualizarModeloTabla(EventoSolicitud evento) {
        
        DefaultTableModel modelo = (DefaultTableModel) tablaSolicitudes.getModel();
        
        switch(evento.getTipo()) {
            
            case SOLICITUD_CREADA: {
                String empleadoAsignado = "";
                if(evento.getSolicitud().getEmpleadoAsignado() != null) {
                    empleadoAsignado = evento.getSolicitud().getEmpleadoAsignado().getNombre();
                }
                
                modelo.addRow(new Object[] {
                    evento.getSolicitud().getId(),
                    evento.getSolicitud().getTitulo(),
                    evento.getSolicitud().getDescripcion(),
                    evento.getSolicitud().getEstado(),
                    empleadoAsignado
                });
            } break;
            
            case SOLICITUD_ACTUALIZADA: {
                for(int i = 0; i < modelo.getRowCount(); i++) {
                    if(Long.valueOf(modelo.getValueAt(i, 0).toString()) == evento.getSolicitud().getId()) {
                        modelo.setValueAt(evento.getSolicitud().getTitulo(), i, 1);
                        modelo.setValueAt(evento.getSolicitud().getDescripcion(), i, 2);
                        break;
                    }
                }
            } break;
            
            case SOLICITUD_ELIMINADA: {
                for(int i = 0; i < modelo.getRowCount(); i++) {
                    if(Long.valueOf(modelo.getValueAt(i, 0).toString()) == evento.getSolicitud().getId()) {
                        modelo.removeRow(i);
                        break;
                    }
                }
            } break;
        }
    }
    
    private void cargarModeloInicial() {
        DefaultTableModel modelo = (DefaultTableModel) tablaSolicitudes.getModel();
        for(Solicitud solicitud : persistencia.listar()) {
            String empleadoAsignado = "";
            if(solicitud.getEmpleadoAsignado() != null) {
                empleadoAsignado = solicitud.getEmpleadoAsignado().getNombre();
            }
                
            modelo.addRow(new Object[] {
                solicitud.getId(),
                solicitud.getTitulo(),
                solicitud.getDescripcion(),
                solicitud.getEstado(),
                empleadoAsignado
            });
        }
    }

    @Override
    public void agregarSuscriptor(Suscriptor<EventoSolicitudesForm> suscriptor) {
        suscriptores.add(suscriptor);
    }

    @Override
    public void notificarEvento(EventoSolicitudesForm evento) {
        suscriptores.forEach((suscriptor) -> suscriptor.recibirEvento(evento));
    }
}
